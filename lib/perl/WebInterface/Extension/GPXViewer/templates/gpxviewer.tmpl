<div title="$tl(gpxviewer): $file" class="gpxviewer" id="gpxviewer">
<div id="gpxviewerscript">
<script type="text/javascript" src="${VHTDOCS}_EXTENSION(GPXViewer)_/htdocs/contrib/loadgpx.js"></script>
</div>
<script>
window.gpxViewerMapCallback = function() {
	$(window).trigger("gpxViewerMapLoaded");	
}
function loadGPXFileIntoGoogleMap(map, filename) {
	var block = ToolBox.blockPage();
    var xhr = $.ajax({url: filename,
		dataType: "xml",
		success: function(data) {
			var parser = new GPXParser(data, map);
			parser.setTrackColour("#ff0000");     // Set the track line colour
			parser.setTrackWidth(5);          // Set the track line width
			parser.setMinTrackPointDelta(0.001);      // Set the minimum distance between track points
			parser.centerAndZoom(data);
			parser.addTrackpointsToMap();         // Add the trackpoints
			parser.addWaypointsToMap();           // Add the waypoints
			
			block.remove();
			renderGPXFileInfo(data);
			
        }
    });
    ToolBox.renderAbortDialog(xhr);
}

function initGPXViewerMap() {
	var mapOptions = {
		zoom: 8,
		mapTypeId: google.maps.MapTypeId.ROADMAP 
	};
	window.gpxViewerMap = new google.maps.Map(document.getElementById("gpxviewermap"), mapOptions);
	loadGPXFileIntoGoogleMap(window.gpxViewerMap, "$uri/$file");
}
function loadGoogleMaps() {
	if (typeof google != "undefined") {
		initGPXViewerMap();
		return;
	}
	var st = document.createElement("script");
	st.setAttribute("type","text/javascript");
	st.setAttribute("src","https://maps.google.com/maps/api/js?sensor=false&callback=gpxViewerMapCallback");
	document.getElementById("gpxviewerscript").appendChild(st);
}
function initGPXViewer() {
	$(window).bind("gpxViewerMapLoaded", initGPXViewerMap);
	loadGoogleMaps();
}
function triggerGPXViewerResize() {
	google.maps.event.trigger(window.gpxViewerMap, "resize");
}
function finalizeGPXViewer() {
	google.maps.event.clearInstanceListeners(window);
	google.maps.event.clearInstanceListeners(document);
	delete window.gpxViewerMap;
}
function calcGPSDistance(trkpt1,trkpt2) {
	var lon1 = trkpt1.attr('lon');
	var lat1 = trkpt1.attr('lat');
	var lon2 = trkpt2.attr('lon');
	var lat2 = trkpt2.attr('lat');
	var d2r = Math.PI / 180;
	var dlon = (lon2-lon1) * d2r;
	var dlat = (lat2-lat1) * d2r;
	var a = Math.pow(Math.sin(dlat/2),2) + Math.pow(Math.sin(dlon/2),2) * Math.cos(lat1 * d2r) * Math.cos(lat2 * d2r);
	return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a) );
}
function getGPSDistanceInKm(distance) {
	return distance * 6367;
}
function getGPSDistanceInMi(distance) {
	return distance * 3956;
}
function calcGPSSpeed(trkpt1,trkpt2,distance,st) {
	var t1 = Date.parse( $("time",trkpt1).text() );
	var t2 = Date.parse( $("time",trkpt2).text() );
	var td = (t2 - t1 - st) / 3600000;
	return td>0 ? distance / td : 0;
}
function calcGPSTimeDiff(trkpt1, trkpt2) {
	return Math.abs( Date.parse($("time",trkpt2).text()) - Date.parse($("time",trkpt1).text()) );
}
function renderGPXDuration(ms) {
	var date = new Date(null);
	date.setSeconds(ms/1000);
	return date.toISOString().substr(11,8);
}
function renderGPXFileInfo(gpx) {
	var data = $(gpx);
	var trkpt = $("trkpt",data);
	
	
	var sp = trkpt.first(); // start point
	var ep = trkpt.last();  // end point
	var tp = trkpt.length;  // track point count
	var bl = calcGPSDistance(sp,ep); // beeline
	var datemin = Date.parse($("time", sp).text());
	var datemax = Date.parse($("time", ep).text());
	var ms = (datemax-datemin);
	var h = ms / 3600000;
	
	var mindistance = 0.0065 / 6365; // meters -> GPS 
	var distance = 0;
	var elemin = 100000000, elemax =0;
	var maxSpeed = 0;
	
	var mt = 0; // moving time
	var ele= 0; // elevation
	
	var debugshown = false;
	for (var i = 0; i< tp -1; i++) {
		var a = $(trkpt[i]);
		var ae = $("ele",a).text();
		var b,be,d;
		var j=1;
		var lmt = 0;
		var rd = 0; // real distance
		do { // skip standing time
			b = $(trkpt[i+j]);
			be = $("ele",b).text();
			d = calcGPSDistance(a,b);
			rd = Math.sqrt(Math.pow(d,2) + Math.pow((ae-be)/6365000,2));
			j++;	
		} while ( (calcGPSTimeDiff(a,b)<1000 || rd < mindistance) && i+j < trkpt.length);  
		i+=j-2;
	
		var bb = $(trkpt[i]); // before b
		
		var st = calcGPSTimeDiff(a,bb); // standing time
		mt += calcGPSTimeDiff(a,b) - st; // moving time (time diff without standing time)
		
		distance+=rd;
	
		if (st==0) maxSpeed = Math.max(maxSpeed, calcGPSSpeed(a,b,rd,st));
		
		if (be-ae >0) ele+=(be-ae);
		elemin = Math.min(Math.min(elemin, ae), be);
		elemax = Math.max(Math.max(elemax, ae), be);
	}
	var km = getGPSDistanceInKm(distance);
	var mi = getGPSDistanceInMi(distance);
	var mth = mt / 3600000;
	
	$("#gpxviewer-startdate").text((new Date(datemin)).toString());
	$("#gpxviewer-enddate").text((new Date(datemax)).toString());
	$("#gpxviewer-distancekm").text(Math.round(km*10)/10);
	$("#gpxviewer-distancemi").text(Math.round(mi*10)/10);
	$("#gpxviewer-duration").text(renderGPXDuration(ms));
	$("#gpxviewer-avgspeedkm").text(Math.round(km/h*10)/10);
	$("#gpxviewer-avgspeedmi").text(Math.round(mi/h*10)/10);
	$("#gpxviewer-maxspeedkm").text(Math.round(getGPSDistanceInKm(maxSpeed)*10)/10);
	$("#gpxviewer-maxspeedmi").text(Math.round(getGPSDistanceInMi(maxSpeed)*10)/10);
	$("#gpxviewer-minaltitude").text(elemin);
	$("#gpxviewer-maxaltitude").text(elemax);
	$("#gpxviewer-beelinekm").text(Math.round(getGPSDistanceInKm(bl)*10)/10);
	$("#gpxviewer-beelinemi").text(Math.round(getGPSDistanceInMi(bl)*10)/10);
	$("#gpxviewer-movingtime").text(renderGPXDuration(mt));
	$("#gpxviewer-avgmovementspeedkm").text(Math.round(km/mth*10)/10);
	$("#gpxviewer-avgmovementspeedmi").text(Math.round(mi/mth*10)/10);
	$("#gpxviewer-elevation").text(Math.round(ele*10)/10);
	
	$("#gpxviewer-trkpts").text(tp);
	$("#gpxviewer-name").text($("name",data).first().text().trim()).attr("title",($("description",data).first().text().trim()));
	
	var spll = new google.maps.LatLng(trkpt.first().attr("lat"), trkpt.first().attr("lon"));
	var epll = new google.maps.LatLng(trkpt.last().attr("lat"), trkpt.last().attr("lon"));
	new google.maps.Marker({
		position : spll,
		map: window.gpxViewerMap,
		title: "$tl(gpxviewer.startdate): "+(new Date(datemin)).toString(),
		icon: "https://maps.google.com/mapfiles/ms/icons/green-dot.png"
	});
	new google.maps.Marker({
		position: epll,
		map: window.gpxViewerMap,
		title: "$tl(gpxviewer.enddate): "+(new Date(datemax)).toString(),
		icon: "https://maps.google.com/mapfiles/ms/icons/red-dot.png"
	});
	
}
</script>
<div class="gpxviewermap" id="gpxviewermap"></div>
<div class="gpxviewerstats" id="gpxviewerstats">
	<div class="gpxviewer-title">$tl(gpxviewer.statistics): <span id="gpxviewer-name">""</span>, <span class="gpxviewer-value" id="gpxviewer-trkpts">0</span> $tl(gpxviewer.trackpoints)</div>
	$tl(gpxviewer.startdate): <span id="gpxviewer-startdate">?</span>,
	<br>
	$tl(gpxviewer.enddate): <span id="gpxviewer-enddate">?</span>,
	<br>
	$tl(gpxviewer.duration): <span class="gpxviewer-value" id="gpxviewer-duration">HH:MM:SS</span>,
	$tl(gpxviewer.movingtime): <span class="gpxviewer-value" id="gpxviewer-movingtime">HH:MM:SS</span>
	<br>
	$tl(gpxviewer.distance): <span class="gpxviewer-value" id="gpxviewer-distancekm">xxx.xx</span> km  = <span class="gpxviewer-value" id="gpxviewer-distancemi">xxx.xx</span> mi,
	$tl(gpxviewer.beeline): <span class="gpxviewer-value" id="gpxviewer-beelinekm">xxx.xx</span> km = <span class="gpxviewer-value" id="gpxviewer-beelinemi">xxx.xx</span> mi,
	<br>
	$tl(gpxviewer.avgspeed): <span class="gpxviewer-value" id="gpxviewer-avgspeedkm">xx.xx</span> km/h = <span class="gpxviewer-value" id="gpxviewer-avgspeedmi">xx.xx</span> mi/h,
	<br> 
	$tl(gpxviewer.avgmovementspeed): <span class="gpxviewer-value" id="gpxviewer-avgmovementspeedkm">xx.xx</span> km/h = <span class="gpxviewer-value" id="gpxviewer-avgmovementspeedmi">xx.xx</span> mi/h,
	<br> 
	$tl(gpxviewer.maxspeed): <span class="gpxviewer-value" id="gpxviewer-maxspeedkm">xxx.xx</span> km/h = <span class="gpxviewer-value" id="gpxviewer-maxspeedmi">xxx.xx</span> mi/h,
	<br>
	$tl(gpxviewer.minaltitude): <span class="gpxviewer-value" id="gpxviewer-minaltitude">xx</span> m,
	$tl(gpxviewer.maxaltitude): <span class="gpxviewer-value" id="gpxviewer-maxaltitude">xx</span> m,
	$tl(gpxviewer.elevation): <span class="gpxviewer-value" id="gpxviewer-elevation">xx</span> m

</div>
</div>
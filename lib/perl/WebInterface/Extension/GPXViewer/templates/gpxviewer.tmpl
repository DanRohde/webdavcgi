<div title="$tl(gpxviewer): $file" class="gpxviewer" id="gpxviewer">
<div id="gpxviewerscript">
<script type="text/javascript" src="${VHTDOCS}_EXTENSION(GPXViewer)_/htdocs/contrib/loadgpx.js"></script>
<script src="${VHTDOCS}_EXTENSION(Libs)_/htdocs/contrib/amcharts/amcharts.js"></script>
<script src="${VHTDOCS}_EXTENSION(Libs)_/htdocs/contrib/amcharts/serial.js"></script>
<script src="${VHTDOCS}_EXTENSION(Libs)_/htdocs/contrib/amcharts/themes/light.js"></script>
</div>
<script>

$("#gpxviewertabs").tabs({heightStyle: "auto", activate: tabActivated});

$("#gpxviewer").on("init.gpxviewer", function(event,data) {
	initGPXViewer(); 
}).on("resized.gpxviewer", function(event,data) {
	var dialog = data.dialog;
	var width = dialog.width()-48;
	var height = dialog.height()-$("#gpxviewerstats",dialog).height()-80;
	$("#gpxviewermap").css({width:width,height:height});
	$("#gpxviewerprofile").css({width:width,height:height});
	triggerGPXViewerResize();
}).on("closed.gpxviewer", function(event,data) {
	finalizeGPXViewer(); 
});

var EARTHRADIUSKM = 6367.137;
var EARTHRADIUSM = 63671370;
var EARTHRADIUSMI = 3956.356;
window.gpxViewerMapCallback = function() {
	$(window).trigger("gpxViewerMapLoaded");	
}
function tabActivated(event,ui) {
	if (ui.newPanel.selector == "#gpxviewerprofile") renderProfile(event,ui);
	else triggerGPXViewerResize();
}
function renderProfile(event,ui) {
	var flagele = $("#gpxviewer");
	if (!flagele.data("gpxviewerprofilerendered")) flagele.data("gpxviewerprofilerendered",true); else return;
	window.setTimeout(function(){
		var dataProvider = $("#gpxviewerprofile").data("json");
		var chart = AmCharts.makeChart("gpxviewerprofile", {
			"type" : "serial", "theme" : "light",
			"dataProvider" : dataProvider,
			"legend" : { "useGraphSettings": true},
			"creditsPosition":"bottom-right",
			"valueAxes" : [
			               {"id": "vspeed", "position": "left", "title": "$tl(gpxviewer.speed)"},
			               {"id": "vele", "position": "right", "title": "$tl(gpxviewer.altitude)"}//,
			               //{"id": "vdistance", "position": "right", "title": "$tl(gpxviewer.distance)", "offset":70}
			               ],
			"graphs": [
			              {"id":"gkph","valueField": "speedkm", "valueAxis": "vspeed",	"title" : "$tl(gpxviewer.kph)", "fillAlphas":0.4,"balloonText":"[[value]] $tl(gpxviewer.kph)","lineColor" :"#FF0000","hidden":("$LANG"!="de"), "bullet" : "round", "bulletAlpha" : 0 },
			              {"id":"gmph","valueField": "speedmi", "valueAxis": "vspeed", "title" : "$tl(gpxviewer.mph)", "fillAlphas":0.4,"balloonText":"[[value]] $tl(gpxviewer.mph)","lineColor" :"#00FF00","hidden":("$LANG"=="de"), "bullet" : "round", "bulletAlpha" : 0 }, 
			              {"id":"gele","valueField": "ele","valueAxis": "vele", "title" : "$tl(gpxviewer.altitude) (m)", "fillAlphas":0.4, "balloonText":"[[value]] m","lineColor":"#111111", "bullet" : "round", "bulletAlpha" : 0},
			              {"id":"gkm", "valueField": "distancekm", "valueAxis":"vdistance", "title":"km","fillAlphas_":0.2,"balloonText":"[[value]] km", "lineColor" :"#EEEEEE", "hidden" : ("$LANG"!="de"), "bullet" : "round", "bulletAlpha" : 0},
			              {"id":"gmi", "valueField": "distancemi", "valueAxis":"vdistance", "title":"mi","fillAlphas_":0.2,"balloonText":"[[value]] mi", "lineColor" :"#EEEEEE", "hidden" : ("$LANG"=="de"), "bullet" : "round", "bulletAlpha" : 0}
			              ],
			"precision":1,
			"categoryField" : "date",
			"categoryAxis" : {
				"parseDates" : true,
				"axisColor" : "#dadada",
				"minorGridEnabled": true,
				"minPeriod" : "ss"
			},
			"chartCursor" : {"cursorPosition": "mouse", "categoryBalloonDateFormat" :"$tl(gpxviewer.dateformat)", "valueLineEnabled" : true, "valueLineBalloonEnabled" : false, "bulletSize" : 0},
			"chartScrollbar" : {
				"graph" : "gele",
				"oppositeAxis": true,
				"offset" : 30,
				"scrollbarHeight" : 30,
			    "backgroundAlpha": 0,
				"selectedBackgroundAlpha": 0.1,
				"selectedBackgroundColor": "#888888",
				"graphFillAlpha": 0,
				"graphLineAlpha": 0.5,
				"selectedGraphFillAlpha": 0,
				"selectedGraphLineAlpha": 1,
				"autoGridCount": true,
				"color" : "#000000"
			},
			"export" : { "enabled":true},
			"listeners" : [ { "event" : "clickGraphItem", "method" : function(e) { 
					var d = dataProvider[e.index];
					var info = "<div><div>$tl(gpxviewer.speed): "+Math.round(d.speedkm)+" $tl(gpxviewer.kph) = "+Math.round(d.speedmi)+" $tl(gpxviewer.mph)</div>"
								+"<div>$tl(gpxviewer.altitude): "+Math.round(d.ele)+" m</div>"
								+"<div>$tl(gpxviewer.distance): "+Math.round(d.distancekm)+ " km = "+Math.round(d.distancemi)+" mi</div>"
								+"<div>"+d.lat+","+d.lon+"</div>"
								+"</div>";
					var color = "ylw-pushpin";
					if (e.graph.valueField == "speedkm") color = "red-pushpin";
					else if (e.graph.valueField == "speedmi") color ="grn-pushpin";
					else if (e.graph.valueField == "ele") color = "purple-pushpin";
					
					addMapMarker(d.lat,d.lon,"$tl(gpxviewer.clickme)",info,color); 
				}}
			]
		});
		chart.balloon.showBullet = false;
		chart.write("gpxviewerprofile");
	},100);
}
function loadGPXFileIntoGoogleMap(map, filename) {
	var block = ToolBox.blockPage();
    var xhr = $.ajax({url: filename,
		dataType: "xml",
		success: function(data) {
			try {
				var parser = new GPXParser(data, map);
				parser.setTrackColour("#ff0000");     // Set the track line colour
				parser.setTrackWidth(5);          // Set the track line width
				parser.setMinTrackPointDelta(0.001);      // Set the minimum distance between track points
				parser.centerAndZoom(data);
				parser.addTrackpointsToMap();         // Add the trackpoints
				parser.addWaypointsToMap();           // Add the waypoints
		
				renderGPXFileInfo(data);
			} catch (e) {
				console.log(e);
			}
        },
        error: function(xhr,status,error) {
        	console.log(status);
        },
        complete: function() {
        	block.remove();
        }
    });
    ToolBox.renderAbortDialog(xhr);
}

function initGPXViewerMap() {
	var mapOptions = {
		zoom: 8,
		mapTypeId: google.maps.MapTypeId.ROADMAP 
	};
	window.gpxViewerMap = new google.maps.Map(document.getElementById("gpxviewermap"), mapOptions);
	loadGPXFileIntoGoogleMap(window.gpxViewerMap, "$uri/$file");
}
function loadGoogleMaps() {
	if (typeof google != "undefined") {
		initGPXViewerMap();
		return;
	}
	var st = document.createElement("script");
	st.setAttribute("type","text/javascript");
	st.setAttribute("src","https://maps.google.com/maps/api/js?sensor=false&callback=gpxViewerMapCallback");
	document.getElementById("gpxviewerscript").appendChild(st);
}
function initGPXViewer() {
	$(window).bind("gpxViewerMapLoaded", initGPXViewerMap);
	loadGoogleMaps();
}
function triggerGPXViewerResize() {
	google.maps.event.trigger(window.gpxViewerMap, "resize");
}
function finalizeGPXViewer() {
	google.maps.event.clearInstanceListeners(window);
	google.maps.event.clearInstanceListeners(document);
	delete window.gpxViewerMap;
}
function calcGPSDistance(trkpt1,trkpt2) {
	var lon1 = trkpt1.attr('lon');
	var lat1 = trkpt1.attr('lat');
	var ele1 = $("ele",trkpt1).text();
	var lon2 = trkpt2.attr('lon');
	var lat2 = trkpt2.attr('lat');
	var ele2 = $("ele",trkpt2).text();
	
	var d2r = Math.PI / 180;
	var dlon = (lon2-lon1) * d2r;
	var dlat = (lat2-lat1) * d2r;
	var a = Math.pow(Math.sin(dlat/2),2) + Math.pow(Math.sin(dlon/2),2) * Math.cos(lat1 * d2r) * Math.cos(lat2 * d2r);
	return Math.sqrt( 
			Math.pow(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a) ),2)
			+ Math.pow((ele2-ele1)/EARTHRADIUSM,2));
}
function getGPSDistanceInKm(distance) {
	return distance * EARTHRADIUSKM;
}
function getGPSDistanceInMi(distance) {
	return distance * EARTHRADIUSMI;
}
function calcGPSSpeed(trkpt1,trkpt2,distance,st) {
	var t1 = Date.parse( $("time",trkpt1).text() );
	var t2 = Date.parse( $("time",trkpt2).text() );
	var td = (t2 - t1 - st) / 3600000;
	return td>0 ? distance / td : 0;
}
function calcGPSTimeDiff(trkpt1, trkpt2) {
	return Math.abs( Date.parse($("time",trkpt2).text()) - Date.parse($("time",trkpt1).text()) );
}
function renderGPXDuration(ms) {
	var date = new Date(null);
	date.setSeconds(ms/1000);
	return date.toISOString().substr(11,8);
}
function logLineInfo(trkpt1,trkpt2) {
	var t1 = $("time",trkpt1).text();
	var e1 = $("ele",trkpt1).text();
	var lo1 = trkpt1.attr("lon");
	var la1 = trkpt1.attr("lat");
	var t2 = $("time",trkpt2).text();
	var e2 = $("ele",trkpt2).text();
	var lo2 = trkpt2.attr("lon");
	var la2 = trkpt2.attr("lat");
	var d = calcGPSDistance(trkpt1,trkpt2);
	console.log("INFO");
	console.log(t1+": "+lo1+" "+la1+", ele="+e1);
	console.log(t2+": "+lo2+" "+la2+", ele="+e2);
	
	console.log("Distance(km)="+getGPSDistanceInKm(d)+", Speed($tl(gpxviewer.kph)): "+getGPSDistanceInKm(calcGPSSpeed(trkpt1,trkpt2,d,0))+", timediff="+calcGPSTimeDiff(trkpt1,trkpt2));
	 
}
function addMapMarker(lat,lon, title, info, color) {
	var marker = new google.maps.Marker({
		position : new google.maps.LatLng(lat, lon),
		map: window.gpxViewerMap,
		title: title,
		icon: "https://maps.google.com/mapfiles/ms/icons/"+color+".png",
		draggable: true,
		
	});
	if (!info) info = title;
	var iw = new google.maps.InfoWindow({ content: info});
	marker.addListener("click", function() { iw.open(window.gpxViewerMap, marker); });
	marker.addListener("dragstart", function(m) { window.gpxViewerMapMarkerDrag = m.latLng; });
	marker.addListener("dragend", function(m) {  if (window.confirm("$tl(gpxviewer.deletemarker)")) this.setMap(null); else this.setPosition(window.gpxViewerMapMarkerDrag); });
}
function renderGPXFileInfo(gpx) {
	var data = $(gpx);
	var trkpt = $("trkpt",data);
	
	
	var sp = trkpt.first(); // start point
	var ep = trkpt.last();  // end point
	var tp = trkpt.length;  // track point count-1
	var bl = calcGPSDistance(sp,ep); // beeline
	var datemin = Date.parse($("time", sp).text());
	var datemax = Date.parse($("time", ep).text());
	var ms = (datemax-datemin);
	var h = ms / 3600000;
	var speeds = new Array();
	var profdata = new Array();
	
	var mindistance = 0.0065 / EARTHRADIUSKM; // meters -> GPS 
	var distance = 0;
	var elemin = 100000000, elemax =0;
	var maxSpeed = 0;
	var maxSpeedPoint;
	var outlier = 0;
	
	var mt = 0; // moving time
	var ele= 0; // elevation
	
	var debugshown = false;
	for (var i = 0; i< tp -1; i++) {
		var a = $(trkpt[i]);
		var ae = $("ele",a).text();
		var b,be,d,td,bb;
		var j=1;
		var st = 0;
		do { // skip standing time and some outliers (LOF is better but slower)
			b = $(trkpt[i+j]);
			be = $("ele",b).text();
			d = calcGPSDistance(a,b);
			bb = $(trkpt[i+j-1]);
			td = calcGPSTimeDiff(bb,b);
			if (be<-100 || be>8000 || td<1000 ) {
				outlier++;
			} else if ( d >= mindistance ) {
				break;
			} else {
				st+=calcGPSTimeDiff(bb,b);
			}
			j++;	
		} while ( i+j < tp);  
		
		i+=j-1;
		
		mt += calcGPSTimeDiff(a,b) - st; // moving time (time diff without standing time)
		
		distance+=d;
	
		if (st==0 && calcGPSTimeDiff(a,b)>999) {
			var _speed = calcGPSSpeed(a,b,d,st);
			speeds.push(_speed);
			profdata.push({ "date":Date.parse($("time",a).text()), 
				"speedkm" : getGPSDistanceInKm(_speed), 
				"speedmi": getGPSDistanceInMi(_speed), 
				"ele" : ae,
				"distancekm" : getGPSDistanceInKm(distance),
				"distancemi" : getGPSDistanceInMi(distance),
				"lon" : b.attr("lon"),
				"lat" : b.attr("lat")
			});
			var m = Math.max(maxSpeed, _speed);
			if (m!=maxSpeed) {
				maxSpeed = m;
				maxSpeedPoint = b;
			}
		}
		if (be-ae >0) ele+=(be-ae);
		elemin = Math.min(Math.min(elemin, ae), be);
		elemax = Math.max(Math.max(elemax, ae), be);
	}
	var km = getGPSDistanceInKm(distance);
	var mi = getGPSDistanceInMi(distance);
	var mth = mt / 3600000;
	
	var maxspeedkm = Math.round(getGPSDistanceInKm(maxSpeed)*10)/10;
	var maxspeedmi = Math.round(getGPSDistanceInMi(maxSpeed)*10)/10;
	speeds.sort();
	var medspeed = 0;
	if ((speeds.length+1) % 2 == 0) {
		var _h = (speeds.length + 1) / 2;
		medspeed = (speeds[_h-1] + speeds[_h])/2;
	} else {
		medspeed = speeds[speeds.length/2];
	}
	var medspeedkm = Math.round(getGPSDistanceInKm(medspeed)*10)/10;
	var medspeedmi = Math.round(getGPSDistanceInMi(medspeed)*10)/10;
	$("#gpxviewer-startdate").text((new Date(datemin)).toString());
	$("#gpxviewer-enddate").text((new Date(datemax)).toString());
	$("#gpxviewer-distancekm").text(Math.round(km*10)/10);
	$("#gpxviewer-distancemi").text(Math.round(mi*10)/10);
	$("#gpxviewer-duration").text(renderGPXDuration(ms));
	$("#gpxviewer-avgspeedkm").text(Math.round(km/h*10)/10);
	$("#gpxviewer-avgspeedmi").text(Math.round(mi/h*10)/10);
	$("#gpxviewer-maxspeedkm").text(maxspeedkm);
	$("#gpxviewer-maxspeedmi").text(maxspeedmi);
	$("#gpxviewer-medspeedkm").text(medspeedkm);
	$("#gpxviewer-medspeedmi").text(medspeedmi);
	$("#gpxviewer-minaltitude").text(elemin);
	$("#gpxviewer-maxaltitude").text(elemax);
	$("#gpxviewer-beelinekm").text(Math.round(getGPSDistanceInKm(bl)*10)/10);
	$("#gpxviewer-beelinemi").text(Math.round(getGPSDistanceInMi(bl)*10)/10);
	$("#gpxviewer-movingtime").text(renderGPXDuration(mt));
	$("#gpxviewer-avgmovementspeedkm").text(Math.round(km/mth*10)/10);
	$("#gpxviewer-avgmovementspeedmi").text(Math.round(mi/mth*10)/10);
	$("#gpxviewer-elevation").text(Math.round(ele*10)/10);
	
	$("#gpxviewer-trkpts").text(tp);
	$("#gpxviewer-name").text($("name",data).first().text().trim()).attr("title",($("description",data).first().text().trim()));
	$("#gpxviewer-outlier").text(outlier);
	
	addMapMarker(trkpt.first().attr("lat"), trkpt.first().attr("lon"), "$tl(gpxviewer.startdate): "+(new Date(datemin)).toString(),false,"green");
	addMapMarker(trkpt.last().attr("lat"), trkpt.last().attr("lon"),"$tl(gpxviewer.enddate): "+(new Date(datemax)).toString(),false,"red-dot");
	addMapMarker(maxSpeedPoint.attr("lat"), maxSpeedPoint.attr("lon"),"$tl(gpxviewer.maxspeed): "+maxspeedkm+"$tl(gpxviewer.kph) = "+maxspeedmi+"$tl(gpxviewer.mph)",false,"blue");
	
	$("#gpxviewerprofile").data("json",profdata);
}
</script>
<div class="gpxviewertabs" id="gpxviewertabs">
<ul>
<li><a href="#gpxviewermap">$tl(gpxviewer.map)</a></li>
<li><a href="#gpxviewerprofile">$tl(gpxviewer.profile)</a></li>
</ul>

<div class="gpxviewermap" id="gpxviewermap"></div>
<div class="gpxviewerprofile" id="gpxviewerprofile"><div class="gpxviewer-pleasewait">$tl(pleasewait)</div></div>
</div>
<div class="gpxviewerstats" id="gpxviewerstats">
	<div class="gpxviewer-title">$tl(gpxviewer.statistics): <span id="gpxviewer-name">""</span>, 
		<span class="gpxviewer-value" id="gpxviewer-trkpts">0</span> $tl(gpxviewer.trackpoints)
		(<span class="gpxviewer-value" id="gpxviewer-outlier">0</span> $tl(gpxviewer.outlier))
	</div>
	$tl(gpxviewer.startdate): <span id="gpxviewer-startdate">?</span>,
	<br>
	$tl(gpxviewer.enddate): <span id="gpxviewer-enddate">?</span>,
	<br>
	$tl(gpxviewer.duration): <span class="gpxviewer-value" id="gpxviewer-duration">HH:MM:SS</span>,
	$tl(gpxviewer.movingtime): <span class="gpxviewer-value" id="gpxviewer-movingtime">HH:MM:SS</span>
	<br>
	$tl(gpxviewer.distance): <span class="gpxviewer-value" id="gpxviewer-distancekm">xxx.xx</span> km  = <span class="gpxviewer-value" id="gpxviewer-distancemi">xxx.xx</span> mi,
	$tl(gpxviewer.beeline): <span class="gpxviewer-value" id="gpxviewer-beelinekm">xxx.xx</span> km = <span class="gpxviewer-value" id="gpxviewer-beelinemi">xxx.xx</span> mi,
	<br>
	$tl(gpxviewer.avgspeed): <span class="gpxviewer-value" id="gpxviewer-avgspeedkm">xxx.xx</span> $tl(gpxviewer.kph) = <span class="gpxviewer-value" id="gpxviewer-avgspeedmi">xxx.xx</span> $tl(gpxviewer.mph),
	<br>
	$tl(gpxviewer.medianspeed):  <span class="gpxviewer-value" id="gpxviewer-medspeedkm">xxx.xx</span>  $tl(gpxviewer.kph) = <span class="gpxviewer-value" id="gpxviewer-medspeedmi">xxxx.xx</span> $tl(gpxviewer.mph),
	<br> 
	$tl(gpxviewer.avgmovementspeed): <span class="gpxviewer-value" id="gpxviewer-avgmovementspeedkm">xxx.xx</span> $tl(gpxviewer.kph) = <span class="gpxviewer-value" id="gpxviewer-avgmovementspeedmi">xxx.xx</span> $tl(gpxviewer.mph),
	<br> 
	$tl(gpxviewer.maxspeed): <span class="gpxviewer-value" id="gpxviewer-maxspeedkm">xxx.xx</span> $tl(gpxviewer.kph) = <span class="gpxviewer-value" id="gpxviewer-maxspeedmi">xxx.xx</span> $tl(gpxviewer.mph),
	<br>
	$tl(gpxviewer.minaltitude): <span class="gpxviewer-value" id="gpxviewer-minaltitude">xx</span> m,
	$tl(gpxviewer.maxaltitude): <span class="gpxviewer-value" id="gpxviewer-maxaltitude">xx</span> m,
	$tl(gpxviewer.elevation): <span class="gpxviewer-value" id="gpxviewer-elevation">xx</span> m

</div>
</div>